{"version":3,"sources":["pattern-bg.png","Data.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","Data","props","className","title","info","Boolean","window","location","hostname","match","ReactDOM","render","useState","input","setInput","text","setText","data","setData","loc","setLoc","showPopUp","setShowPopUp","api","useEffect","a","async","axios","result","lat","lng","console","log","getData","onSubmit","e","preventDefault","type","value","onChange","target","src","pattern","alt","ip","city","country","postalCode","timezone","isp","Map","center","zoom","TileLayer","url","attribution","Marker","onMouseOver","onMouseOut","position","Popup","as","domain","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,wC,2PCW5BC,MATf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,wBAAIA,UAAU,cAAcD,EAAME,OAClC,wBAAID,UAAU,aAAaD,EAAMG,Q,MCMzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCCD,WAAgB,IAAD,YACFC,mBAAS,IADP,mBACrBC,EADqB,KACdC,EADc,OAEJF,mBAASC,GAFL,mBAErBE,EAFqB,KAEfC,EAFe,OAGJJ,mBAAS,IAHL,mBAGrBK,EAHqB,KAGfC,EAHe,OAINN,mBAAS,CAAC,MAAO,OAJX,mBAIrBO,EAJqB,KAIhBC,EAJgB,OAKMR,oBAAS,GALf,mBAKrBS,EALqB,KAKVC,EALU,KAUtBC,EAAM,kFAAoFR,EAUhG,OATAS,qBAAU,YACR,uBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,IAAMJ,IAD7B,OACQK,EADR,OAEEV,EAAQU,EAAOX,MACfG,EAAO,WAACQ,EAAOX,KAAKV,gBAAb,aAAC,EAAsBsB,IAAvB,UAA4BD,EAAOX,KAAKV,gBAAxC,aAA4B,EAAsBuB,MACzDC,QAAQC,IAAIJ,EAAOX,MAJrB,qCAMAgB,KACC,CAAClB,IAEF,6BACE,yBAAKb,UAAU,iBACf,wBAAIA,UAAU,SAAd,sBACE,0BAAMA,UAAU,WAAWgC,SAlBjC,SAAsBC,GACpBA,EAAEC,iBACFpB,EAAQH,KAiBF,2BAAOX,UAAU,QAAQmC,KAAK,OAAOC,MAAOzB,EAAO0B,SAAU,SAAAJ,GAAC,OAAGrB,EAASqB,EAAEK,OAAOF,UACnF,2BAAOpC,UAAU,SAASmC,KAAK,SAASC,MAAM,WAEhD,yBAAKpC,UAAU,YAAYuC,IAAKC,IAASC,IAAI,SAC7C,yBAAKzC,UAAU,WACb,kBAAC,EAAD,CAAMC,MAAQ,aAAaC,KAAQa,EAAK2B,KACxC,kBAAC,EAAD,CAAMzC,MAAQ,WAAWC,MAAQ,UAAAa,EAAKV,gBAAL,eAAesC,MAAM,MAArB,UAA4B5B,EAAKV,gBAAjC,aAA4B,EAAeuC,SAAS,KAApD,UAAyD7B,EAAKV,gBAA9D,aAAyD,EAAewC,cACzG,kBAAC,EAAD,CAAM5C,MAAQ,WAAWC,KAAI,UAAIa,EAAKV,gBAAT,aAAI,EAAeyC,WAChD,kBAAC,EAAD,CAAM7C,MAAQ,MAAMC,KAAQa,EAAKgC,QAGrC,kBAACC,EAAA,EAAD,CAAKC,OAAQhC,EAAKiC,KAAM,IACtB,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEZ,kBAACC,EAAA,EAAD,CAAQC,YAAa,kBAAInC,GAAa,IAAOoC,WAAY,kBAAIpC,GAAa,IAAQqC,SAAU,CAACxC,EAAI,GAAIA,EAAI,MAGzGE,GAAc,kBAACuC,EAAA,EAAD,CAAOD,SAAU,CAACxC,EAAI,GAAIA,EAAI,KAC1C,6BACE,qCAAIF,EAAK4C,UAAT,aAAI,EAASC,cD/CX,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1dffba38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pattern-bg.8d3f4ad6.png\";","import React from 'react'\n\nfunction Data(props) {\n    return (\n        <div className=\"data\">\n            <h5 className=\"info-title\">{props.title}</h5>\n            <h3 className=\"info-data\">{props.info}</h3>\n        </div>\n    )\n}\n\nexport default Data\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useEffect, useState} from 'react';\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport pattern from './pattern-bg.png'\nimport axios from 'axios';\nimport Data from './Data';\nimport \"./App.css\";\n\nexport default function App() {\n  const [input, setInput] = useState(\"\");\n  const [text, setText] = useState(input);\n  const [data, setData] = useState([]);\n  const [loc, setLoc] = useState([45.4, -75.7]);\n  const [showPopUp, setShowPopUp] = useState(false);\n  function handleSubmit(e) {\n    e.preventDefault();\n    setText(input);\n  }\n  const api = \"https://geo.ipify.org/api/v1?apiKey=at_LiGqZ4wuXR3UoGUUCLa6dd5CB8UjE&ipAddress=\" + text;\n  useEffect(() => {\n    async function getData() {\n      const result = await axios(api);\n      setData(result.data)\n      setLoc([result.data.location?.lat, result.data.location?.lng])\n      console.log(result.data);\n    }\n    getData()\n  }, [text]);\n  return (\n    <div>\n      <div className=\"top-container\">\n      <h1 className=\"title\">IP Address Tracker</h1>\n        <form className=\"top-form\" onSubmit={handleSubmit}>\n          <input className=\"input\" type=\"text\" value={input} onChange={e=> setInput(e.target.value)}/>\n          <input className=\"submit\" type=\"submit\" value=\"  >  \" />\n        </form>\n        <img className=\"top-image\" src={pattern} alt=\"Logo\"/>\n        <div className=\"display\">\n          <Data title = \"IP ADDRESS\" info = {data.ip} />\n          <Data title = \"LOCATION\" info = {data.location?.city +', ' + data.location?.country +' '+ data.location?.postalCode}/>\n          <Data title = \"TIMEZONE\" info = {data.location?.timezone} />\n          <Data title = \"ISP\" info = {data.isp} />\n        </div>\n      </div>\n      <Map center={loc} zoom={13}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n          <Marker onMouseOver={()=>setShowPopUp(true)} onMouseOut={()=>setShowPopUp(false)} position={[loc[0], loc[1]]}/>\n          {\n    \n          showPopUp && (<Popup position={[loc[0], loc[1]]}>\n            <div>\n              <p>{data.as?.domain}</p>\n            </div>\n          </Popup>)\n    \n          }\n      </Map>\n    </div>\n  );\n}"],"sourceRoot":""}